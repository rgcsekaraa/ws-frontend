// File: client/src/App.tsx
import React, { useEffect, useState } from 'react';
import io from 'socket.io-client';
import './App.css';
import { RefreshCw } from 'lucide-react';

interface Player {
  id: string;
  name: string;
  color: string;
  score: number;
  isAdmin?: boolean;
  country?: {
    code: string;
    name: string;
  };
}

interface GridSquare {
  id: number;
  color: string;
  ownerId: string;
  ownerName: string;
}

const countryFlags: { [key: string]: string } = {
  AF: 'ðŸ‡¦ðŸ‡«',
  AL: 'ðŸ‡¦ðŸ‡±',
  DZ: 'ðŸ‡©ðŸ‡¿',
  AS: 'ðŸ‡¦ðŸ‡¸',
  AD: 'ðŸ‡¦ðŸ‡©',
  AO: 'ðŸ‡¦ðŸ‡´',
  AI: 'ðŸ‡¦ðŸ‡®',
  AQ: 'ðŸ‡¦ðŸ‡¶',
  AR: 'ðŸ‡¦ðŸ‡·',
  AM: 'ðŸ‡¦ðŸ‡²',
  AW: 'ðŸ‡¦ðŸ‡¼',
  AU: 'ðŸ‡¦ðŸ‡º',
  AT: 'ðŸ‡¦ðŸ‡¹',
  AZ: 'ðŸ‡¦ðŸ‡¿',
  BS: 'ðŸ‡§ðŸ‡¸',
  BH: 'ðŸ‡§ðŸ‡­',
  BD: 'ðŸ‡§ðŸ‡©',
  BB: 'ðŸ‡§ðŸ‡§',
  BY: 'ðŸ‡§ðŸ‡¾',
  BE: 'ðŸ‡§ðŸ‡ª',
  BZ: 'ðŸ‡§ðŸ‡¿',
  BJ: 'ðŸ‡§ðŸ‡¯',
  BM: 'ðŸ‡§ðŸ‡²',
  BT: 'ðŸ‡§ðŸ‡¹',
  BO: 'ðŸ‡§ðŸ‡´',
  BA: 'ðŸ‡§ðŸ‡¦',
  BW: 'ðŸ‡§ðŸ‡¼',
  BV: 'ðŸ‡§ðŸ‡»',
  BR: 'ðŸ‡§ðŸ‡·',
  IO: 'ðŸ‡®ðŸ‡´',
  VG: 'ðŸ‡»ðŸ‡¬',
  BN: 'ðŸ‡§ðŸ‡³',
  BG: 'ðŸ‡§ðŸ‡¬',
  BF: 'ðŸ‡§ðŸ‡«',
  BI: 'ðŸ‡§ðŸ‡®',
  KH: 'ðŸ‡°ðŸ‡­',
  CM: 'ðŸ‡¨ðŸ‡²',
  CA: 'ðŸ‡¨ðŸ‡¦',
  CV: 'ðŸ‡¨ðŸ‡»',
  KY: 'ðŸ‡°ðŸ‡¾',
  CF: 'ðŸ‡¨ðŸ‡«',
  TD: 'ðŸ‡¹ðŸ‡©',
  CL: 'ðŸ‡¨ðŸ‡±',
  CN: 'ðŸ‡¨ðŸ‡³',
  CX: 'ðŸ‡®ðŸ‡´',
  CC: 'ðŸ‡¨ðŸ‡¨',
  CO: 'ðŸ‡¨ðŸ‡´',
  KM: 'ðŸ‡°ðŸ‡²',
  CG: 'ðŸ‡¨ðŸ‡¬',
  CD: 'ðŸ‡¨ðŸ‡©',
  CK: 'ðŸ‡¨ðŸ‡°',
  CR: 'ðŸ‡¨ðŸ‡·',
  HR: 'ðŸ‡­ðŸ‡·',
  CU: 'ðŸ‡¨ðŸ‡º',
  CY: 'ðŸ‡¨ðŸ‡¾',
  CZ: 'ðŸ‡¨ðŸ‡¿',
  DK: 'ðŸ‡©ðŸ‡°',
  DJ: 'ðŸ‡©ðŸ‡¯',
  DM: 'ðŸ‡©ðŸ‡²',
  DO: 'ðŸ‡©ðŸ‡´',
  EC: 'ðŸ‡ªðŸ‡¨',
  EG: 'ðŸ‡ªðŸ‡¬',
  SV: 'ðŸ‡¸ðŸ‡»',
  GQ: 'ðŸ‡¬ðŸ‡¶',
  ER: 'ðŸ‡ªðŸ‡·',
  EE: 'ðŸ‡ªðŸ‡ª',
  SZ: 'ðŸ‡¸ðŸ‡¿',
  ET: 'ðŸ‡ªðŸ‡¹',
  FK: 'ðŸ‡«ðŸ‡°',
  FO: 'ðŸ‡«ðŸ‡´',
  FJ: 'ðŸ‡«ðŸ‡¯',
  FI: 'ðŸ‡«ðŸ‡®',
  FR: 'ðŸ‡«ðŸ‡·',
  GF: 'ðŸ‡¬ðŸ‡«',
  PF: 'ðŸ‡µðŸ‡«',
  TF: 'ðŸ‡¹ðŸ‡«',
  GA: 'ðŸ‡¬ðŸ‡¦',
  GM: 'ðŸ‡¬ðŸ‡²',
  GE: 'ðŸ‡¬ðŸ‡ª',
  DE: 'ðŸ‡©ðŸ‡ª',
  GH: 'ðŸ‡¬ðŸ‡­',
  GI: 'ðŸ‡¬ðŸ‡®',
  GR: 'ðŸ‡¬ðŸ‡·',
  GL: 'ðŸ‡¬ðŸ‡±',
  GD: 'ðŸ‡¬ðŸ‡©',
  GP: 'ðŸ‡¬ðŸ‡µ',
  GU: 'ðŸ‡¬ðŸ‡º',
  GT: 'ðŸ‡¬ðŸ‡¹',
  GN: 'ðŸ‡¬ðŸ‡³',
  GW: 'ðŸ‡¬ðŸ‡¼',
  GY: 'ðŸ‡¬ðŸ‡¾',
  HT: 'ðŸ‡­ðŸ‡¹',
  HM: 'ðŸ‡­ðŸ‡²',
  VA: 'ðŸ‡»ðŸ‡¦',
  HN: 'ðŸ‡­ðŸ‡³',
  HK: 'ðŸ‡­ðŸ‡°',
  HU: 'ðŸ‡­ðŸ‡º',
  IS: 'ðŸ‡®ðŸ‡¸',
  IN: 'ðŸ‡®ðŸ‡³',
  ID: 'ðŸ‡®ðŸ‡©',
  IR: 'ðŸ‡®ðŸ‡·',
  IQ: 'ðŸ‡®ðŸ‡¶',
  IE: 'ðŸ‡®ðŸ‡ª',
  IL: 'ðŸ‡®ðŸ‡±',
  IT: 'ðŸ‡®ðŸ‡¹',
  JM: 'ðŸ‡¯ðŸ‡²',
  JP: 'ðŸ‡¯ðŸ‡µ',
  JO: 'ðŸ‡¯ðŸ‡´',
  KZ: 'ðŸ‡°ðŸ‡¿',
  KE: 'ðŸ‡°ðŸ‡ª',
  KI: 'ðŸ‡°ðŸ‡®',
  KP: 'ðŸ‡°ðŸ‡µ',
  KR: 'ðŸ‡°ðŸ‡·',
  KW: 'ðŸ‡°ðŸ‡¼',
  KG: 'ðŸ‡°ðŸ‡¬',
  LA: 'ðŸ‡±ðŸ‡¦',
  LV: 'ðŸ‡±ðŸ‡»',
  LB: 'ðŸ‡±ðŸ‡§',
  LS: 'ðŸ‡±ðŸ‡¸',
  LR: 'ðŸ‡±ðŸ‡·',
  LY: 'ðŸ‡±ðŸ‡¾',
  LI: 'ðŸ‡±ðŸ‡®',
  LT: 'ðŸ‡±ðŸ‡¹',
  LU: 'ðŸ‡±ðŸ‡º',
  MO: 'ðŸ‡²ðŸ‡´',
  MK: 'ðŸ‡²ðŸ‡°',
  MG: 'ðŸ‡²ðŸ‡¬',
  MW: 'ðŸ‡²ðŸ‡¼',
  MY: 'ðŸ‡²ðŸ‡¾',
  MV: 'ðŸ‡²ðŸ‡»',
  ML: 'ðŸ‡²ðŸ‡±',
  MT: 'ðŸ‡²ðŸ‡¹',
  MH: 'ðŸ‡²ðŸ‡­',
  MQ: 'ðŸ‡²ðŸ‡¶',
  MR: 'ðŸ‡²ðŸ‡·',
  MU: 'ðŸ‡²ðŸ‡º',
  YT: 'ðŸ‡¾ðŸ‡¹',
  MX: 'ðŸ‡²ðŸ‡½',
  FM: 'ðŸ‡«ðŸ‡²',
  MD: 'ðŸ‡²ðŸ‡©',
  MC: 'ðŸ‡²ðŸ‡¨',
  MN: 'ðŸ‡²ðŸ‡³',
  ME: 'ðŸ‡²ðŸ‡ª',
  MS: 'ðŸ‡²ðŸ‡¸',
  MA: 'ðŸ‡²ðŸ‡¦',
  MZ: 'ðŸ‡²ðŸ‡¿',
  MM: 'ðŸ‡²ðŸ‡²',
  NA: 'ðŸ‡³ðŸ‡¦',
  NR: 'ðŸ‡³ðŸ‡·',
  NP: 'ðŸ‡³ðŸ‡µ',
  NL: 'ðŸ‡³ðŸ‡±',
  NC: 'ðŸ‡³ðŸ‡¨',
  NZ: 'ðŸ‡³ðŸ‡¿',
  NI: 'ðŸ‡³ðŸ‡®',
  NE: 'ðŸ‡³ðŸ‡ª',
  NG: 'ðŸ‡³ðŸ‡¬',
  NU: 'ðŸ‡³ðŸ‡º',
  NF: 'ðŸ‡³ðŸ‡«',
  MP: 'ðŸ‡²ðŸ‡µ',
  NO: 'ðŸ‡³ðŸ‡´',
  OM: 'ðŸ‡´ðŸ‡²',
  PK: 'ðŸ‡µðŸ‡°',
  PW: 'ðŸ‡µðŸ‡¼',
  PS: 'ðŸ‡µðŸ‡¸',
  PA: 'ðŸ‡µðŸ‡¦',
  PG: 'ðŸ‡µðŸ‡¬',
  PY: 'ðŸ‡µðŸ‡¾',
  PE: 'ðŸ‡µðŸ‡ª',
  PH: 'ðŸ‡µðŸ‡­',
  PN: 'ðŸ‡µðŸ‡³',
  PL: 'ðŸ‡µðŸ‡±',
  PT: 'ðŸ‡µðŸ‡¹',
  PR: 'ðŸ‡µðŸ‡·',
  QA: 'ðŸ‡¶ðŸ‡¦',
  RE: 'ðŸ‡·ðŸ‡ª',
  RO: 'ðŸ‡·ðŸ‡´',
  RU: 'ðŸ‡·ðŸ‡º',
  RW: 'ðŸ‡·ðŸ‡¼',
  BL: 'ðŸ‡§ðŸ‡±',
  SH: 'ðŸ‡¸ðŸ‡­',
  KN: 'ðŸ‡°ðŸ‡³',
  LC: 'ðŸ‡±ðŸ‡¨',
  PM: 'ðŸ‡µðŸ‡²',
  VC: 'ðŸ‡»ðŸ‡¨',
};

const App: React.FC = () => {
  const [socket, setSocket] = useState<any>(null);
  const [playerName, setPlayerName] = useState('');
  const [playerColor, setPlayerColor] = useState(generateRandomColor());
  const [isJoined, setIsJoined] = useState(false);
  const [players, setPlayers] = useState<Player[]>([]);
  const [gameGrid, setGameGrid] = useState<GridSquare[]>([]);
  const [timeLeft, setTimeLeft] = useState(60);
  const [winner, setWinner] = useState<Player | null>(null);
  const [countdown, setCountdown] = useState<number | null>(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [loading, setLoading] = useState(false);
  const [joinError, setJoinError] = useState<string | null>(null);

  // Function to generate a random color
  function generateRandomColor(): string {
    let color;
    do {
      color = Math.floor(Math.random() * 1610495).toString(16);
      color = '#' + color.padStart(6, '0'); // Ensure it's 6 digits
    } while (color === '#000000'); // Avoid black color
    return color;
  }

  // Function to refresh the color
  const refreshColor = () => {
    setPlayerColor(generateRandomColor());
  };

  // Initialize socket connection
  useEffect(() => {
    const newSocket = io(import.meta.env.VITE_BACKEND_URL as string);
    setSocket(newSocket);

    newSocket.on(
      'gameState',
      (data: {
        grid: GridSquare[];
        players: Player[];
        timeLeft: number;
        countdown: number | null;
        winner: Player | null;
      }) => {
        setGameGrid(data.grid);
        setPlayers(data.players);
        setTimeLeft(data.timeLeft);
        setCountdown(data.countdown);
        setWinner(data.winner);
      }
    );

    newSocket.on('adminStatus', (status: boolean) => {
      setIsAdmin(status);
      // If user is admin, automatically join the game as admin
      if (status && !isJoined) {
        setPlayerName('Admin');
        setPlayerColor('#000000'); // Black color for admin

        // Delay this slightly to ensure socket is fully connected
        setTimeout(() => {
          newSocket.emit(
            'joinGame',
            { name: 'Admin', color: '#000000', isAdmin: true },
            (response: { success: boolean; message?: string }) => {
              if (response.success) {
                setIsJoined(true);
              }
            }
          );
        }, 500);
      }
    });

    newSocket.on('error', (message) => {
      alert(message);
    });

    return () => {
      newSocket.disconnect();
    };
  }, []);

  // Add an effect to monitor players and set winner when game ends
  useEffect(() => {
    // If the game is over (timeLeft === 0) and there's no winner yet
    if (timeLeft === 0 && !winner && players.length > 0) {
      // Find the player with the highest score
      const highestScorer = [...players].sort((a, b) => b.score - a.score)[0];

      // If there are no other players except admin, admin wins by default
      const adminPlayer = players.find((player) => player.isAdmin);
      const nonAdminPlayers = players.filter((player) => !player.isAdmin);

      if (nonAdminPlayers.length === 0 && adminPlayer) {
        setWinner(adminPlayer);
      } else {
        setWinner(highestScorer);
      }
    }
  }, [timeLeft, winner, players]);

  const joinGame = () => {
    if (!playerName.trim()) {
      alert('Please enter your name');
      return;
    }

    setLoading(true);
    setJoinError(null);

    // Make sure to pass the selected color when joining
    socket.emit(
      'joinGame',
      {
        name: playerName,
        color: playerColor,
        isAdmin: false, // Explicitly mark as not admin
      },
      (response: { success: boolean; message?: string }) => {
        setLoading(false);
        if (response.success) {
          setIsJoined(true);
        } else {
          setJoinError(response.message || 'Failed to join the game.');
        }
      }
    );
  };

  const claimSquare = (squareId: number) => {
    if (!isJoined || winner) return;
    socket.emit('claimSquare', squareId);
  };

  // Generate grid with 100 squares (10x10)
  const renderGrid = () => {
    const grid = [];
    for (let i = 0; i < 100; i++) {
      const square = gameGrid[i] || {
        id: i,
        color: '#FFFFFF',
        ownerId: '',
        ownerName: '',
      };

      // Highlight admin squares differently if needed
      const isAdminSquare = square.ownerName === 'Admin';

      grid.push(
        <div
          key={i}
          className={`grid-square ${isAdminSquare ? 'admin-square' : ''}`}
          style={{ backgroundColor: square.color }}
          onClick={() => claimSquare(i)}
          title={
            square.ownerName ? `Owned by: ${square.ownerName}` : 'Unclaimed'
          }
        />
      );
    }
    return grid;
  };

  // Render player list with scores and flags
  const renderPlayers = () => {
    return players
      .sort((a, b) => b.score - a.score)
      .map((player) => (
        <div
          key={player.id}
          className={`player-item ${player.isAdmin ? 'admin-player' : ''}`}
        >
          <div
            className="player-color"
            style={{ backgroundColor: player.color }}
          ></div>
          <div className="player-flag">
            {player.country && countryFlags[player.country.code] ? (
              <span title={player.country.name}>
                {countryFlags[player.country.code]}
              </span>
            ) : (
              <span></span>
            )}
          </div>
          <div className="player-name">
            {player.name}
            {player.isAdmin && <span className="admin-label">(Chan)</span>}
            {player.id === socket?.id && !player.isAdmin && (
              <span className="you-label">(You)</span>
            )}
          </div>
          <div className="player-score">{player.score}</div>
        </div>
      ));
  };

  if (!socket) {
    return <div className="loading">Connecting to server...</div>;
  }

  if (!isJoined) {
    return (
      <div className="join-screen">
        <h1>Colour Territory ðŸš©</h1>
        <div className="game-description">
          <p>Claim as many squares as you can!</p>
          <p>Each game lasts 1 minute.</p>
          <p> Player with the most territory wins.</p>
        </div>
        <div className="join-form">
          <input
            type="text"
            placeholder="Enter your name"
            value={playerName}
            onChange={(e) => setPlayerName(e.target.value)}
            maxLength={15}
          />
          <div className="color-picker-container">
            <label>Your Color:</label>
            <div
              className="color-preview"
              style={{ backgroundColor: playerColor }}
            ></div>
            <button onClick={refreshColor}>
              <RefreshCw className="icon-width" width={16} height={16} />
            </button>
          </div>
          <button onClick={joinGame} disabled={loading}>
            {loading ? 'Joining...' : 'JOIN GAME'}
          </button>
          {joinError && <div className="error-message">{joinError}</div>}
        </div>
        <div className="active-players">
          <p>Active players: {players.length}</p>
          {players.length > 0 && players.some((p) => p.isAdmin) && (
            <p className="admin-note">
              Admin is always in the game by default.
            </p>
          )}
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="game-container">
        <h1 className="title-game-container">Colour Territory ðŸš©</h1>
        <div className="game-header">
          <div className="timer">
            {countdown !== null ? (
              <div className="countdown">
                New game starting in: {countdown}s
              </div>
            ) : (
              <div>Time left: {timeLeft}s</div>
            )}
          </div>

          <div className="stats">
            <div className="players-count">ðŸŸ¢ Players: {players.length}</div>
            {isAdmin && <div className="admin-badge">Admin</div>}
          </div>
        </div>

        {winner && (
          <div
            className="winner-announcement"
            style={{ borderColor: winner.color }}
          >
            <h2>Game Over!</h2>
            <div className="winner-info">
              {winner.country && countryFlags[winner.country.code] ? (
                <span title={winner.country.name}>
                  {countryFlags[winner.country.code]}
                </span>
              ) : (
                <span></span>
              )}
              <p style={{ color: winner.color }}>
                {winner.name} wins with {winner.score} squares!
                {winner.isAdmin &&
                  players.length === 1 &&
                  ' (Default win as only player)'}
              </p>
            </div>
          </div>
        )}

        <div className="game-content">
          <div className="grid-container">{renderGrid()}</div>

          <div className="sidebar">
            <h3>Players</h3>
            <div className="player-list">
              <div className="player-header">
                <div className="player-color"></div>
                <div className="player-flag"></div>
                <div className="player-name">Name</div>
                <div className="player-score">Score</div>
              </div>
              {renderPlayers()}
            </div>

            <div className="game-instructions">
              <h4>How to Play</h4>
              <p>Click on any square to claim it with your color.</p>
              <p>
                The player with the most squares at the end of the round wins!
              </p>
              <p className="note">
                Note: The admin (black) always controls the first square and
                will win by default if no other players join.
              </p>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default App;
